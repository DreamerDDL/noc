package sae;

//
// RPC Transport
//
message Message {
    required uint32   id       = 1; // Transaction id
    optional Request  request  = 2;
    optional Response response = 3;
    optional Error    error    = 4;
}

message Request {
    required string method             = 1;
    required bytes  serialized_request = 2; // encoded *Request
}

message Response {
    optional bytes  serialized_response = 1; // encoded *Response
}

message Error {
    required ErrorCode code = 1;
    optional string    text = 2;
}
//
//
//
enum ErrorCode {
    ERR_OK                  = 0; //
    ERR_INTERNAL            = 1; // Unhandled exception on server side during request processing
    ERR_INVALID_METHOD      = 2; // Invalid method name
    ERR_INVALID_TRANSACTION = 3; // Transaction does not exists
    ERR_TRANSACTION_EXISTS  = 4;
    ERR_UNKNOWN_ACTIVATOR   = 5;
    ERR_INVALID_PROFILE     = 6; // Invalid profile
    ERR_INVALID_SCHEME      = 7; // Invalid access scheme
    ERR_UNKNOWN_EVENT_SOURCE = 8;
    ERR_AUTH_FAILED         = 9; // Authentication failed
    ERR_AUTH_REQUIRED       =10; // Authentication required
    ERR_INVALID_UPGRADE     =11; // Invalid file requested for upgrade
    ERR_OVERLOAD            =12; // System limit exceeded. Retry operation after delay
}

//
//
//
enum AccessScheme {
    TELNET = 0;
    SSH    = 1;
    HTTP   = 2;
}

message AccessProfile {
    required string       profile        = 1;
    required AccessScheme scheme         = 2;
    required string       address        = 3;
    optional string       port           = 4;
    optional string       user           = 5;
    optional string       password       = 6;
    optional string       super_password = 7;
    optional string       path           = 8;
}
//
// Ping server
// SAE->Activator
// Activator->SAE
message PingRequest {
}

message PingResponse {
}
//
// Register activator at the SAE
// Activator->SAE
message RegisterRequest {
    required string name = 1;
}

message RegisterResponse {
    required string nonce = 1;
}
//
//
//
message AuthRequest {
    required string name   = 1;
    required string digest = 2;
}

message AuthResponse {
}

//
// Returns device configuration
// SAE->Activator
message PullConfigRequest {
    required AccessProfile access_profile = 1;
}

message PullConfigResponse {
    required string config  = 1;
}
//
// Software Upgrade
//
message FileChecksum {
    required string name   = 1; // Relative file name
    required string hash   = 2; // SHA1 hexdigest
}

message ManifestRequest {
}

message ManifestResponse {
    repeated FileChecksum files = 1;
}

message SoftwareUpgradeRequest {
    repeated string names = 1; // Relative file names
}

message FileCode {
    required string name = 1;
    required string code = 2;
}

message SoftwareUpgradeResponse {
    repeated FileCode codes = 1;
}
//
// Event processing
//
enum EventSource {
    ES_UNKNOWN   = 0;
    ES_SNMP_TRAP = 1;
    ES_SYSLOG    = 2;
}

enum EventAction {
    EA_IGNORE         = 0;
    EA_PROXY          = 1;
    EA_CONFIG_CHANGED = 2;
}

message EventFilterRequest {
    repeated EventSource sources = 1;
}

message EventFilterResponse {
    message EventFilter {
        required EventSource source = 1;
        required string      ip     = 2;
        required string      mask   = 3;
        required EventAction action = 4;
    }
    required int32       expire  = 1;
    repeated EventFilter filters = 2;
}

message EventResponse {
}

message EventProxyRequest {
    required EventSource source = 1;
    required string      ip     = 2;
    required string      message= 3;
    optional string      body   = 4;
}

message EventConfigChangedRequest {
    required EventSource source = 1;
    required string      ip     = 2;
}

//
// RPC Services
//
service SAEService {
    rpc ping             (PingRequest)            returns (PingResponse);
    rpc register         (RegisterRequest)        returns (RegisterResponse);
    rpc auth             (AuthRequest)            returns (AuthResponse);
    rpc manifest         (ManifestRequest)        returns (ManifestResponse);
    rpc software_upgrade (SoftwareUpgradeRequest) returns (SoftwareUpgradeResponse);
    rpc pull_config      (PullConfigRequest)      returns (PullConfigResponse);
    rpc event_filter     (EventFilterRequest)     returns (EventFilterResponse);
    rpc event_proxy      (EventProxyRequest)      returns (EventResponse);
    rpc event_config_changed (EventConfigChangedRequest) returns (EventResponse);
}