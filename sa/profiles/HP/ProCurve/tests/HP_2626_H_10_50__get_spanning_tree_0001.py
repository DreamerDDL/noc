# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## HP.ProCurve.get_spanning_tree test
## Auto-generated by ./noc debug-script at 21.01.2013 18:14:07
##----------------------------------------------------------------------
## Copyright (C) 2007-2013 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## NOC modules
from noc.lib.test import ScriptTestCase


class HP_ProCurve_get_spanning_tree_Test(ScriptTestCase):
    script = "HP.ProCurve.get_spanning_tree"
    vendor = "HP"
    platform = "2626"
    version = "H.10.50 "
    input = {}
    result = u'<class \'noc.sa.script.exception.CLISyntaxError\'>\nsh spanning-tree instance istInvalid input: instance\n\nSTART OF TRACEBACK\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 628)\nFunction: cli\n  621             if isinstance(data, Exception):\n  622                 # Exception captured\n  623                 raise data\n  624             if not ignore_errors:\n  625                 # Check for syntax error\n  626                 if (self.profile.rx_pattern_syntax_error and\n  627                     self.profile.rx_pattern_syntax_error.search(data)):\n  628 ==>                 raise self.CLISyntaxError(data)\n  629                 # Then check for operaion error\n  630                 if (self.profile.rx_pattern_operation_error and\n  631                     self.profile.rx_pattern_operation_error.search(data)):\n  632                     raise self.CLIOperationError(data)\n  633             # Echo cancelation\n  634             if self.strip_echo and data.lstrip().startswith(cmd):\nVariables:\n                 cmd = \'sh spanning-tree instance ist\'\n                  cc = \'CLI:sh spanning-tree instance ist\'\n          bulk_lines = None\n               cache = {}\n      command_submit = \'\\n\'\n              cached = False\n          from_cache = False\n                file = None\n             list_re = None\n       ignore_errors = False\n                data = \'sh spanning-tree instance istInvalid input: instance\\n\'\n                self = <Script(script-192.168.2.22-HP.ProCurve.get_spanning_tree, started 139925568747264)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_spanning_tree.py (Line: 236)\nFunction: process_rstp\n  229             # Create instances\n  230             instance = {\n  231                 \'id\': 0,\n  232                 \'vlans\': "1-4095",\n  233                 \'bridge_id\': bridge_id\n  234             }\n  235     \n  236 ==>         for l in self.cli(\'sh spanning-tree instance ist\').splitlines():\n  237                 if l.find(\'Switch Priority\') > 0:\n  238                     instance[\'bridge_priority\'] = int(l.split(\':\')[1].strip())\n  239                 if l.find(\'Regional Root MAC Address\') > 0:\n  240                     instance[\'root_id\'] = l.split(\':\')[1].strip()\n  241                 if l.find(\'Regional Root Priority\') > 0:\n  242                     instance[\'root_priority\'] = int(l.split(\':\')[1].strip())\nVariables:\n           bridge_id = \'001c2e-3a6080\'\n            instance = {\'bridge_id\': \'001c2e-3a6080\', \'vlans\': \'1-4095\', \'id\': 0}\n                self = <Script(script-192.168.2.22-HP.ProCurve.get_spanning_tree, started 139925568747264)>\n                   r = {\'mode\': \'RSTP\'}\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_spanning_tree.py (Line: 303)\nFunction: execute\n  296         def execute(self):\n  297             stp_version = self.mib_get("hpicfBridgeRstpForceVersion")\n  298             if stp_version == "1":\n  299                 # STP\n  300                 pass\n  301             elif stp_version == "2":\n  302                 # RSTP\n  303 ==>             return self.process_rstp()\n  304             elif stp_version == "3":\n  305                 # MSTP\n  306                 return self.process_mstp()\nVariables:\n                self = <Script(script-192.168.2.22-HP.ProCurve.get_spanning_tree, started 139925568747264)>\n         stp_version = \'2\'\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 417)\nFunction: guarded_run\n  410                     return result\n  411                 except KeyError:\n  412                     self.debug("Not in call cache: %r, %r" % (self.name,\n  413                                                               self.kwargs))\n  414                     pass\n  415                 # Calling script body\n  416             self._thread_id = thread.get_ident()\n  417 ==>         result = self.execute(**self.kwargs)\n  418             # Enforce interface result checking\n  419             for i in self.implements:\n  420                 result = i.script_clean_result(self.profile, result)\n  421             # Cache result when required\n  422             if self.cache and self.parent is not None:\n  423                 self.debug("Write to call cache: %s, %s, %r" % (self.name,\nVariables:\n                   i = <noc.sa.interfaces.igetspanningtree.IGetSpanningTree object at 0x3b35d50>\n                self = <Script(script-192.168.2.22-HP.ProCurve.get_spanning_tree, started 139925568747264)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 440)\nFunction: run\n  433     \n  434         def run(self):\n  435             """Script thread worker method"""\n  436             self.debug("Running")\n  437             result = None\n  438             try:\n  439                 with self.cancelable():\n  440 ==>                 result = self.guarded_run()\n  441             except self.TimeOutError:\n  442                 self.error("Timed out")\n  443                 self.e_timeout = True\n  444             except CancelledError:\n  445                 self.error("Cancelled")\n  446                 self.e_cancel = True\nVariables:\n                self = <Script(script-192.168.2.22-HP.ProCurve.get_spanning_tree, started 139925568747264)>\n                   r = ["<class \'noc.sa.script.exception.CLISyntaxError\'>", \'sh spanning-tree instance istInvalid input: instance\\n\']\n              result = None\n                   v = CLISyntaxError(\'sh spanning-tree instance istInvalid input: instance\\n\',)\n                  tb = <traceback object at 0x477e5a8>\n                   t = <class \'noc.sa.script.exception.CLISyntaxError\'>\n------------------------------------------------------------------------\nEND OF TRACEBACK'
    motd = ''
    cli = {
'walkMIB hpicfBridgeRstpForceVersion':  'walkMIB hpicfBridgeRstpForceVersionhpicfBridgeRstpForceVersion.0 = 2\n', 
'terminal length 1000':  'terminal length ', 
'sh spanning-tree instance ist':  'sh spanning-tree instance istInvalid input: instance\n', 
'walkMIB dot1dBaseBridgeAddress':  'walkMIB dot1dBaseBridgeAddressdot1dBaseBridgeAddress.0 = 00 1c 2e 3a 60 80 \n', 
}
    snmp_get = {}
    snmp_getnext = {}
    http_get = {}
