# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## HP.ProCurve.get_switchport test
## Auto-generated by ./noc debug-script at 21.01.2013 18:19:07
##----------------------------------------------------------------------
## Copyright (C) 2007-2013 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## NOC modules
from noc.lib.test import ScriptTestCase


class HP_ProCurve_get_switchport_Test(ScriptTestCase):
    script = "HP.ProCurve.get_switchport"
    vendor = "HP"
    platform = "2510"
    version = "Q.11.17"
    input = {}
    result = u'<type \'exceptions.IndexError\'>\nlist index out of range\nSTART OF TRACEBACK\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_switchport.py (Line: 62)\nFunction: execute\n   55                         if not i in tag.keys(): tag[i] = [] \n   56                         tag[i] += [j]           \n   57             return untag, tag\n   58             \n   59             \n   60             \n   61         def execute(self):\n   62 ==>         portsnum = int(self.cli("walkMIB dot1dBaseNumPorts").split(\'=\')[1])\n   63             untagged, tagged = self.getVlanPort()\n   64             iface = {}\n   65             sports = []\n   66             step = len(self.objstr)\n   67             lines = self.cli("walkMIB " + " ".join(self.objstr.keys())).split("\\n")[:-1]\n   68             portchannel_members = {}  # member -> (portchannel, type)\nVariables:\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_switchport, started 140100238821120)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 417)\nFunction: guarded_run\n  410                     return result\n  411                 except KeyError:\n  412                     self.debug("Not in call cache: %r, %r" % (self.name,\n  413                                                               self.kwargs))\n  414                     pass\n  415                 # Calling script body\n  416             self._thread_id = thread.get_ident()\n  417 ==>         result = self.execute(**self.kwargs)\n  418             # Enforce interface result checking\n  419             for i in self.implements:\n  420                 result = i.script_clean_result(self.profile, result)\n  421             # Cache result when required\n  422             if self.cache and self.parent is not None:\n  423                 self.debug("Write to call cache: %s, %s, %r" % (self.name,\nVariables:\n                   i = <noc.sa.interfaces.igetswitchport.IGetSwitchport object at 0x36b8250>\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_switchport, started 140100238821120)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 440)\nFunction: run\n  433     \n  434         def run(self):\n  435             """Script thread worker method"""\n  436             self.debug("Running")\n  437             result = None\n  438             try:\n  439                 with self.cancelable():\n  440 ==>                 result = self.guarded_run()\n  441             except self.TimeOutError:\n  442                 self.error("Timed out")\n  443                 self.e_timeout = True\n  444             except CancelledError:\n  445                 self.error("Cancelled")\n  446                 self.e_cancel = True\nVariables:\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_switchport, started 140100238821120)>\n                   r = ["<type \'exceptions.IndexError\'>", \'list index out of range\']\n              result = None\n                   v = IndexError(\'list index out of range\',)\n                  tb = <traceback object at 0x4301290>\n                   t = <type \'exceptions.IndexError\'>\n------------------------------------------------------------------------\nEND OF TRACEBACK'
    motd = ''
    cli = {
'walkMIB dot1dBaseNumPorts':  'terminal length ', 
'terminal length 1000':  'nableInvalid input: nable\n', 
}
    snmp_get = {}
    snmp_getnext = {}
    http_get = {}
