# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## HP.ProCurve.get_mac_address_table test
## Auto-generated by ./noc debug-script at 21.01.2013 18:10:42
##----------------------------------------------------------------------
## Copyright (C) 2007-2013 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## NOC modules
from noc.lib.test import ScriptTestCase


class HP_ProCurve_get_mac_address_table_Test(ScriptTestCase):
    script = "HP.ProCurve.get_mac_address_table"
    vendor = "HP"
    platform = "2650"
    version = "H.10.50"
    input = {}
    result = u'<class \'noc.sa.script.exception.CLISyntaxError\'>\nerminal length 1000Invalid input: erminal\n\nSTART OF TRACEBACK\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 628)\nFunction: cli\n  621             if isinstance(data, Exception):\n  622                 # Exception captured\n  623                 raise data\n  624             if not ignore_errors:\n  625                 # Check for syntax error\n  626                 if (self.profile.rx_pattern_syntax_error and\n  627                     self.profile.rx_pattern_syntax_error.search(data)):\n  628 ==>                 raise self.CLISyntaxError(data)\n  629                 # Then check for operaion error\n  630                 if (self.profile.rx_pattern_operation_error and\n  631                     self.profile.rx_pattern_operation_error.search(data)):\n  632                     raise self.CLIOperationError(data)\n  633             # Echo cancelation\n  634             if self.strip_echo and data.lstrip().startswith(cmd):\nVariables:\n                 cmd = \'walkMIB dot1qVlanFdbId\'\n                  cc = \'CLI:walkMIB dot1qVlanFdbId\'\n          bulk_lines = None\n               cache = {}\n      command_submit = \'\\n\'\n              cached = False\n          from_cache = False\n                file = None\n             list_re = None\n       ignore_errors = False\n                data = \'erminal length 1000Invalid input: erminal\\n\'\n                self = <Script(script-172.20.1.8-HP.ProCurve.get_mac_address_table, started 140155889587968)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_mac_address_table.py (Line: 28)\nFunction: execute\n   21         rx_fdb_vlan = re.compile(r"dot1qVlanFdbId\\.\\d+\\.(\\d+)\\s*=\\s*(\\d+)")\n   22         rx_line = re.compile(r"dot1qTpFdbPort\\.(\\d+)\\.(\\S+)\\s*=\\s*(\\d+)")\n   23         rx_if = re.compile(r"ifName\\.(\\d+)\\s*=\\s*(\\S+)")\n   24     \n   25         def execute(self, interface=None, vlan=None, mac=None):\n   26             # Build FDB VLAN ID-> VLAN ID mapping\n   27             fdb_vmap = {}\n   28 ==>         for match in self.rx_fdb_vlan.finditer(self.cli("walkMIB dot1qVlanFdbId")):\n   29                 fdb_vmap[match.group(2)] = int(match.group(1))\n   30             # Build ifIndex -> port name mapping\n   31             ifindex = {}\n   32             for match in self.rx_if.finditer(self.cli("walkMIB ifName")):\n   33                 ifindex[match.group(1)] = match.group(2)\n   34             # Get through vlans\nVariables:\n           interface = None\n                 mac = None\n                vlan = None\n                self = <Script(script-172.20.1.8-HP.ProCurve.get_mac_address_table, started 140155889587968)>\n            fdb_vmap = {}\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 417)\nFunction: guarded_run\n  410                     return result\n  411                 except KeyError:\n  412                     self.debug("Not in call cache: %r, %r" % (self.name,\n  413                                                               self.kwargs))\n  414                     pass\n  415                 # Calling script body\n  416             self._thread_id = thread.get_ident()\n  417 ==>         result = self.execute(**self.kwargs)\n  418             # Enforce interface result checking\n  419             for i in self.implements:\n  420                 result = i.script_clean_result(self.profile, result)\n  421             # Cache result when required\n  422             if self.cache and self.parent is not None:\n  423                 self.debug("Write to call cache: %s, %s, %r" % (self.name,\nVariables:\n                   i = <noc.sa.interfaces.igetmacaddresstable.IGetMACAddressTable object at 0x2a7af90>\n                self = <Script(script-172.20.1.8-HP.ProCurve.get_mac_address_table, started 140155889587968)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 440)\nFunction: run\n  433     \n  434         def run(self):\n  435             """Script thread worker method"""\n  436             self.debug("Running")\n  437             result = None\n  438             try:\n  439                 with self.cancelable():\n  440 ==>                 result = self.guarded_run()\n  441             except self.TimeOutError:\n  442                 self.error("Timed out")\n  443                 self.e_timeout = True\n  444             except CancelledError:\n  445                 self.error("Cancelled")\n  446                 self.e_cancel = True\nVariables:\n                self = <Script(script-172.20.1.8-HP.ProCurve.get_mac_address_table, started 140155889587968)>\n                   r = ["<class \'noc.sa.script.exception.CLISyntaxError\'>", \'erminal length 1000Invalid input: erminal\\n\']\n              result = None\n                   v = CLISyntaxError(\'erminal length 1000Invalid input: erminal\\n\',)\n                  tb = <traceback object at 0x36c69e0>\n                   t = <class \'noc.sa.script.exception.CLISyntaxError\'>\n------------------------------------------------------------------------\nEND OF TRACEBACK'
    motd = ''
    cli = {
'walkMIB dot1qVlanFdbId':  'erminal length 1000Invalid input: erminal\n', 
## 'terminal length 1000'
'terminal length 1000': """ProCurve J4899B Switch 2650
Software revision H.10.50

Copyright (C) 1991-2007 Hewlett-Packard Co.  All Rights Reserved.

                           RESTRICTED RIGHTS LEGEND

 Use, duplication, or disclosure by the Government is subject to restrictions
 as set forth in subdivision (b) (3) (ii) of the Rights in Technical Data and
 Computer Software clause at 52.227-7013.

         HEWLETT-PACKARD COMPANY, 3000 Hanover St., Palo Alto, CA 94303
""", 
}
    snmp_get = {}
    snmp_getnext = {}
    http_get = {}
