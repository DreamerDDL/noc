# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## HP.ProCurve.get_spanning_tree test
## Auto-generated by ./noc debug-script at 21.01.2013 18:14:33
##----------------------------------------------------------------------
## Copyright (C) 2007-2013 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## NOC modules
from noc.lib.test import ScriptTestCase


class HP_ProCurve_get_spanning_tree_Test(ScriptTestCase):
    script = "HP.ProCurve.get_spanning_tree"
    vendor = "HP"
    platform = "2510"
    version = "Q.11.17"
    input = {}
    result = u'<type \'exceptions.KeyError\'>\nNone\nSTART OF TRACEBACK\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_spanning_tree.py (Line: 49)\nFunction: mib_walk\n   42                         k = int(k)\n   43                     else:\n   44                         k = tuple([int(x) for x in k.split(".")])\n   45                     r[k] = v\n   46                     last_id = k\n   47                 else:\n   48                     # Multi-line value\n   49 ==>                 r[last_id] += "\\n" + l\n   50             return r\n   51     \n   52         ##\n   53         ## MSTP Parsing\n   54         ##\n   55         def process_mstp(self):\nVariables:\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_spanning_tree, started 140537101285120)>\n                 oid = \'hpicfBridgeMSTInstanceDesignatedRoot\'\n                   l = \'No such variable: hpicfBridgeMSTInstanceDesignatedRoot.\'\n                   r = {}\n               l_oid = 37\n             last_id = None\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_spanning_tree.py (Line: 83)\nFunction: process_mstp\n   76             interfaces = {}\n   77             v = self.mib_walk("hpicfBridgeMSTInstanceRowStatus")\n   78             for instance_id in v:\n   79                 if v[instance_id] == "1":\n   80                     instances[instance_id] = {"id": instance_id}\n   81                     interfaces[instance_id] = {}\n   82             # Set root id and root priority\n   83 ==>         v = self.mib_walk("hpicfBridgeMSTInstanceDesignatedRoot")\n   84             for instance_id in v:\n   85                 if instance_id in instances:\n   86                     root = v[instance_id].replace(" ", "")\n   87                     root_priority = int(root[:2] + "00", 16)\n   88                     root = "%s-%s" % (root[4:10], root[10:])\n   89                     instances[instance_id]["root_id"] = root\nVariables:\n           bridge_id = \'0018fe-571f80\'\n          interfaces = {0: {}}\n         instance_id = 0\n           instances = {0: {\'id\': 0}}\n                   r = {\'instances\': [], \'configuration\': {\'MSTP\': {\'region\': \'0018fe571f80\', \'revision\': \'0\'}}, \'mode\': \'MSTP\'}\n                   v = {0: \'1\'}\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_spanning_tree, started 140537101285120)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/profiles/HP/ProCurve/get_spanning_tree.py (Line: 306)\nFunction: execute\n  299                 # STP\n  300                 pass\n  301             elif stp_version == "2":\n  302                 # RSTP\n  303                 return self.process_rstp()\n  304             elif stp_version == "3":\n  305                 # MSTP\n  306 ==>             return self.process_mstp()\n\nVariables:\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_spanning_tree, started 140537101285120)>\n         stp_version = \'3\'\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 417)\nFunction: guarded_run\n  410                     return result\n  411                 except KeyError:\n  412                     self.debug("Not in call cache: %r, %r" % (self.name,\n  413                                                               self.kwargs))\n  414                     pass\n  415                 # Calling script body\n  416             self._thread_id = thread.get_ident()\n  417 ==>         result = self.execute(**self.kwargs)\n  418             # Enforce interface result checking\n  419             for i in self.implements:\n  420                 result = i.script_clean_result(self.profile, result)\n  421             # Cache result when required\n  422             if self.cache and self.parent is not None:\n  423                 self.debug("Write to call cache: %s, %s, %r" % (self.name,\nVariables:\n                   i = <noc.sa.interfaces.igetspanningtree.IGetSpanningTree object at 0x28dbd50>\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_spanning_tree, started 140537101285120)>\n------------------------------------------------------------------------\nFile: /opt/noc/sa/script/script.py (Line: 440)\nFunction: run\n  433     \n  434         def run(self):\n  435             """Script thread worker method"""\n  436             self.debug("Running")\n  437             result = None\n  438             try:\n  439                 with self.cancelable():\n  440 ==>                 result = self.guarded_run()\n  441             except self.TimeOutError:\n  442                 self.error("Timed out")\n  443                 self.e_timeout = True\n  444             except CancelledError:\n  445                 self.error("Cancelled")\n  446                 self.e_cancel = True\nVariables:\n                self = <Script(script-192.168.2.11-HP.ProCurve.get_spanning_tree, started 140537101285120)>\n                   r = ["<type \'exceptions.KeyError\'>", \'None\']\n              result = None\n                   v = KeyError(None,)\n                  tb = <traceback object at 0x35266c8>\n                   t = <type \'exceptions.KeyError\'>\n------------------------------------------------------------------------\nEND OF TRACEBACK'
    motd = ''
    cli = {
'walkMIB hpicfBridgeRstpForceVersion':  'walkMIB hpicfBridgeRstpForceVersionhpicfBridgeRstpForceVersion.0 = 3\n', 
'walkMIB hpicfBridgeMSTRegionName':  'walkMIB hpicfBridgeMSTRegionNamehpicfBridgeMSTRegionName.0 = 0018fe571f80 \n', 
'walkMIB hpicfBridgeMSTInstanceRowStatus':  'walkMIB hpicfBridgeMSTInstanceRowStatushpicfBridgeMSTInstanceRowStatus.0 = 1\n', 
'terminal length 1000':  'terminal length ', 
'walkMIB dot1dBaseBridgeAddress':  'walkMIB dot1dBaseBridgeAddressdot1dBaseBridgeAddress.0 = 00 18 fe 57 1f 80 \n', 
'walkMIB hpicfBridgeMSTInstanceDesignatedRoot':  'walkMIB hpicfBridgeMSTInstanceDesignatedRootNo such variable: hpicfBridgeMSTInstanceDesignatedRoot.\n', 
'walkMIB hpicfBridgeMSTRegionRevision':  'walkMIB hpicfBridgeMSTRegionRevisionhpicfBridgeMSTRegionRevision.0 = 0\n', 
}
    snmp_get = {}
    snmp_getnext = {}
    http_get = {}
