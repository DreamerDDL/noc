#!./bin/python
# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## System Version Report
##----------------------------------------------------------------------
## Copyright (C) 2007-2011 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## Python modules
import os
import sys
import platform
import subprocess
## Third-party modules
import pymongo
## NOC modules
import settings
from noc.lib.version import get_version

if hasattr(subprocess, "check_output"):
    check_output = subprocess.check_output
else:
    def check_output(args):
        return subprocess.Popen(args, stdout=subprocess.PIPE).communicate()[0]


def get_branch():
    from mercurial import ui, localrepo
    try:
        repo = localrepo.localrepository(ui.ui(), path=".")
        return repo.dirstate.branch()
    except:
        return "none"


def get_pg_version():
    with os.popen("pg_config --version") as f:
        return f.read().strip().split(" ", 1)[1]


def get_mongo_version():
    connection_args = {}
    if settings.NOSQL_DATABASE_HOST:
        connection_args["host"] = settings.NOSQL_DATABASE_HOST
    if settings.NOSQL_DATABASE_PORT:
        connection_args["port"] = settings.NOSQL_DATABASE_PORT
    c = pymongo.Connection(**connection_args)
    i = c.server_info()
    return "%s (%dbit)" % (i["version"], i["bits"])


def get_brand():
    """
    Get OS brand
    :return:
    """
    o = os.uname()[0].lower()
    if o == "linux":
        # First, try lsb_release -d
        try:
            b = check_output(["lsb_release", "-d"])
            return b.split(":", 1)[1].strip()
        except OSError:
            pass
        if os.path.exists("/etc/SuSE-release"):
            # SuSE
            with open("/etc/SuSE-release") as f:
                return f.readline().strip()
    elif o == "darwin":
        # OS X
        return "Mac OS X %s" % platform.mac_ver()[0]
    return None


def get_python_packages():
    o = check_output(["./bin/pip", "freeze"])
    r = []
    for l in o.splitlines():
        if "==" in l:
            r += [l.split("==", 1)]
    return r


def about():
    versions = [
        ["NOC", get_version()],
        ["Branch", get_branch()],
        ["OS", " ".join(os.uname())]
    ]
    os_brand = get_brand()
    if os_brand:
        versions += [["OS Brand", os_brand]]
    versions += [
        ["Python", sys.version.split()[0]],
        ["PostgreSQL", get_pg_version()],
        ["MongoDB", get_mongo_version()]
    ]
    versions += get_python_packages()
    for c, v in versions:
        print "|%s|%s|" % (c, v.replace("\n", " "))

if __name__ == "__main__":
    about()
