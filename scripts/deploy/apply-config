#!./bin/python
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------
# Generate etc/supervisord.conf
# ----------------------------------------------------------------------
# Copyright (C) 2007-2015 The NOC Project
# See LICENSE for details
# ----------------------------------------------------------------------

# Python modules
import sys
import glob
import ConfigParser
import sys
import os
# Third party modules
import six
import yaml


SUPERVISORD_CFG = "etc/noc_services.conf"
NOC_CFG = "etc/noc.yml"

ENV_MAP = {
    "loglevel": "NOC_LOGLEVEL"
}

JEMALLOC_LOCATION = [
    '/usr/lib/x86_64-linux-gnu/libjemalloc.so.1',
    '/usr/lib64/libjemalloc.so.1',
]

def format_env(env):
    """
    Build environment string
    """
    def q(s):
        return str(s).replace("%", "%%")
    return ",".join("%s=\"%s\"" % (k, q(env[k])) for k in env)


def build(node):
    with open(NOC_CFG) as f:
        jcfg = yaml.load(f)
    config = ConfigParser.RawConfigParser()
    # Read configs
    for path in glob.glob("etc/services/*.conf"):
        config.read(path)
    # Node environment
    ne = {
        "NOC_ENV": jcfg["nodes"][node]["environment"],
        "NOC_DC": jcfg["nodes"][node]["datacenter"],
        "NOC_NODE": node,
        "NOC_USER": jcfg["config"]["noc"]["user"],
        "NOC_ROOT": os.getcwd()
    }
    #search for jemalloc
    for path in JEMALLOC_LOCATION:
        if os.path.exists(path):
            ne['LD_PRELOAD'] = path
    # Build config
    out = ConfigParser.ConfigParser()
    for s in sorted(config.sections()):
        se = ne.copy()
        # Process program secrion
        if s.startswith("program:"):
            s = s[8:]  # Strip "program:"
            # Apply global service config
            if s in jcfg["config"]:
                for k in ENV_MAP:
                    if k in jcfg["config"][s]:
                        se[ENV_MAP[k]] = jcfg["config"][s][k]
            # Build pools configuration
            js = [
                sn for sn in jcfg["config"]
                if sn.startswith("%s-" % s) and sn.endswith("-%s" % node)
            ]
            for j in js:
                # Build pool environment
                pe = se.copy()
                pool = j.split("-", 1)[1].split("-", 1)[0]
                if pool == "global":
                    sn = "program:%s" % s
                else:
                    sn = "program:%s-%s" % (s, pool)
                    pe["NOC_POOL"] = pool
                # Build pool environment
                for k in ENV_MAP:
                    if k in jcfg["config"][j]:
                        pe[ENV_MAP[k]] = jcfg["config"][j][k]
                # Build configuration
                out.add_section(sn)
                pn = "program:%s" % s
                # Copy config
                for o in config.options(pn):
                    v = config.get(pn, o)
                    out.set(sn, o, v)
                numprocs = jcfg["config"][j].get("n_instances", "1")
                out.set(sn, "environment", format_env(pe))
                out.set(sn, "autostart", "true")
                out.set(sn, "numprocs", numprocs)


    # Convert to .ini format
    buffer = six.StringIO()
    out.write(buffer)
    cfg = buffer.getvalue()
    # Read old config
    if os.path.exists(SUPERVISORD_CFG):
        with open(SUPERVISORD_CFG) as f:
            old = f.read()
    else:
        old = None
    if old == cfg:
        print "OK"
    else:
        # Rewrite
        with open(SUPERVISORD_CFG, "w") as f:
            f.write(cfg)
        print "CHANGED"

if __name__ == "__main__":
    build(sys.argv[1])
